01.要素の数が変化するデータ構造が必要なのはなぜか？
A.データ構造に新しいデータを加えたり、差し引いたりしたいため。固定数の要素を格納するデータ構造を超えるものが必要になるから。

02.標準的なプログラムで使用する4種類のストレージとは何か？
A.コード用のメモリであるコードストレージ（テキストストレージ）、グローバル変数用のメモリ（静的ストレージ）、関数の呼び出し時に使われるメモリとさらにそれらの引数とローカル変数のための領域（スタックストレージ）、コンピュータのメモリの残り（フリー、空き領域）。

03.フリーストアとはなにか？フリーストアに対して一般的に使用される別の名前は名前は何か？それをサポートする演算子は何か？
A.ヒープとも呼ばれる。コンピュータのメモリの残りのこと。サポートする演算子はnew。

04.間接参照演算子とは何か？それが必要なのはなぜか？
A.間接演算子とはポインタがポイントしているオブジェクトの読み取り書き込みを行うために必要な演算子。*で表す。

05.アドレスとは何か？C＋＋ではメモリアドレスをどのように操作するか？
A.メモリ内での位置を表す番号をアドレスという。一種の整数値として考えることができ、ポインタでアドレスを保持する。

06.ポインタはポイント先のオブジェクトに対してどのような情報をもつか？ポインタに欠けている重要な情報とは何か？
A.メモリの１バイト目のアドレスをもつ。ポインタはそれがポイントする要素の数を知らない。

07.ポインタは何をポイントするか？
A.指定された型のオブジェクト。

08.リークとはなにか？
A.確保したメモリを開放し忘れること。

09.リソースとはなにか？
A.メモリのこと（？）

10.ポインタはどのようにして初期化できるか？
A.例１：int* p = new int(0);　例２：int*p[i] = 0;

11.nullポインタとはなにか？それが必要になるのはどのような時か？
A.ポインタに代入された０の値のことをnullポインタという。ポインタが0であるかどうかを調べることでポインタが有効であるかをチェックすることができる。他に初期化するものがない場合に有効。

12.（参照または名前付きのオブジェクトではなく）ポインタが必要になるのはどのような時か？
A.ポインタの値を後に変更する場合がある時はポインタを使う方がよい。

13.デストラクタとはなにか？それが必要になるのはどのような時か？
A.オブジェクトがスコープを外れた時に自動的に呼び出され、オブジェクトが正しくクリーンアップされてから削除されるようにする。メモリリークを防ぐ。

14.virtualデストラクタが必要になるのはどのような時か？
A.virtual関数をもつクラスがある場合。virtual関数をもつクラスは基底クラスとして使用される可能性があり、それが基底クラスである場合、その派生クラスはnew演算子を使って割り当てられる可能性があり、派生クラスのオブジェクトがnew演算子を使って割り当てられ、その基底へのポインタを使って操作される場合、その基底へのポインタを通じて削除される可能性がある。

15.メンバのデストラクタはどのようにして呼び出されるか？
A.delete演算子を使って暗黙的または間接的に呼び出される。直接呼び出されることはない。

16.キャストとはなにか？それが必要になるのはどのような時か？
A.void型のポインタ型変換に対してよく行われる。ポインタ型の間での明示的な変換。

17.ポインタを通じてクラスとメンバにアクセスするにはどうすればよいか？
A.アロー演算子（->）を用いる。

18.双方向リストとはなにか？
A.リンクに基づいて前の要素と次の要素を見つけ出せるリストのこと。

19.thisとはなにか？それが必要になるのはどのような時か？
A.メンバ関数が呼び出されたオブジェクトをポインタするポインタ。

